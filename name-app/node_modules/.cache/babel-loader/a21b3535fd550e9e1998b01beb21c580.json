{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/villetaskinen/Desktop/names/names-app/src/nameTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Grid, Card, Button, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField, Typography } from '@material-ui/core';\nimport data from './resources/names';\nconst useStyles = makeStyles({\n  table: {\n    width: \"50%\"\n  },\n  card: {\n    background: \"white\",\n    width: \"50%\"\n  },\n  container: {\n    width: 500\n  },\n  button: {\n    padding: '30px'\n  }\n});\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nexport const NameTable = () => {\n  _s();\n\n  const classes = useStyles;\n  const names = data.names;\n  const [nameOrder, setNameOrder] = useState(true);\n  const [buttonText, setButtonText] = useState(\"Order by amount\");\n  var total = 0;\n\n  const sortNames = () => {\n    if (nameOrder) {\n      names.sort((a, b) => a.name > b.name ? 1 : -1);\n    } else {\n      names.sort((a, b) => a.amount < b.amount ? 1 : -1);\n    }\n  };\n\n  const countTotal = () => {\n    for (var i = 0; i < names.length; i++) {\n      total += names[i].amount;\n    }\n  };\n\n  const buttonHandler = () => {\n    if (nameOrder) {\n      setNameOrder(false);\n      setButtonText(\"order by amount\");\n    } else {\n      setNameOrder(true);\n      setButtonText(\"order by name\");\n    }\n  };\n\n  sortNames();\n  countTotal();\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 12,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h2\",\n          children: \"Name Application\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: buttonHandler,\n          children: buttonText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          variant: \"filled\",\n          label: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        className: classes.container,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: classes.table,\n          \"aria-label\": \"simple table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                align: \"right\",\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: [names.map((s, i) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: s.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: s.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                align: \"right\",\n                children: total\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NameTable, \"dSwhh+8pywWdGKQS0HjG5sz2Vqo=\");\n\n_c = NameTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"NameTable\");","map":{"version":3,"sources":["/Users/villetaskinen/Desktop/names/names-app/src/nameTable.js"],"names":["React","useState","Grid","Card","Button","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TextField","Typography","data","useStyles","table","width","card","background","container","button","padding","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","NameTable","classes","names","nameOrder","setNameOrder","buttonText","setButtonText","total","sortNames","sort","a","b","name","amount","countTotal","i","length","buttonHandler","map","s"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {\n    Grid, Card, Button, withStyles, makeStyles, Table, TableBody, TableCell,\n    TableContainer, TableHead, TableRow, TextField, Typography,\n} from '@material-ui/core';\nimport data from './resources/names'\n\n\nconst useStyles = makeStyles({\n    table: {\n        width: \"50%\",\n    },\n    card: {\n        background: \"white\",\n        width: \"50%\",\n    },\n    container: {\n        width: 500,\n    },\n    button: {\n        padding: '30px',\n    },\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nexport const NameTable = () => {\n\n    const classes = useStyles;\n\n    const names = data.names;\n\n    const [nameOrder, setNameOrder] = useState(true);\n    const [buttonText, setButtonText] = useState(\"Order by amount\");\n\n    var total = 0;\n\n    const sortNames = () => {\n        if (nameOrder) {\n            names.sort((a, b) => (a.name > b.name) ? 1 : -1)\n        }\n        else {\n            names.sort((a, b) => (a.amount < b.amount) ? 1 : -1)\n\n        }\n    }\n    \n\n    const countTotal = () => {\n        for (var i = 0; i < names.length; i++) {\n            total += names[i].amount;\n        }\n    }\n\n    const buttonHandler = () => {\n        if (nameOrder) {\n            setNameOrder(false);\n            setButtonText(\"order by amount\");\n        }else {\n            setNameOrder(true);\n            setButtonText(\"order by name\");\n        }\n    }\n\n    sortNames();\n    countTotal();\n\n    return (\n\n\n\n        <Card className={classes.card}>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={3}\n            >\n                <Grid container item xs={12}>\n                    <Typography variant=\"h2\">Name Application</Typography>\n                    <br />\n<Button onClick={buttonHandler}>{buttonText}</Button>\n    <TextField variant=\"filled\" label=\"Search\"/>\n                </Grid>\n\n\n\n                <TableContainer className={classes.container}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell>Name</StyledTableCell>\n                                <StyledTableCell align=\"right\">Amount</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {names.map((s, i) => (\n                                <TableRow key={i}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {s.name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{s.amount}</TableCell>\n                                </TableRow>\n                            ))}\n                            <TableRow>\n                                <StyledTableCell>Total</StyledTableCell>\n                                <StyledTableCell align=\"right\">{total}</StyledTableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </Card>\n\n\n    );\n};"]},"metadata":{},"sourceType":"module"}