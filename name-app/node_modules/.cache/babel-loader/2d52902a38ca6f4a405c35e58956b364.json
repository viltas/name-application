{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/villetaskinen/Desktop/names/names-app/src/nameTable.js\";\nimport React from 'react';\nimport { Grid, Card, Button, withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel } from '@material-ui/core';\nimport data from './resources/names';\nconst useStyles = makeStyles({\n  table: {\n    width: \"50%\"\n  },\n  card: {\n    background: \"white\",\n    width: \"50%\"\n  },\n  container: {\n    width: 500\n  },\n  button: {\n    padding: '30px'\n  }\n});\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nexport const NameTable = () => {\n  const classes = useStyles;\n  const names = data.names;\n\n  const sortNames = nameOrder => {\n    if (nameOrder) {\n      names.sort((a, b) => a.name.toUppescase() > b.name.toUppercase() ? 1 : -1);\n    } else {\n      names.sort((a, b) => a.amount > b.amount ? 1 : -1);\n    }\n  };\n\n  const nameOrder = \"true\";\n  const totalAmount = 100;\n  console.log(names[0]);\n  sortNames;\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.card,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button,\n          variant: \"outlined\",\n          color: \"primary\",\n          disabled: nameOrder,\n          children: \"Order by name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        item: true,\n        xs: 6,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: classes.button,\n          variant: \"outlined\",\n          color: \"primary\",\n          disabled: !nameOrder,\n          children: \"Order by amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 24\n      }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n        className: classes.container,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          className: classes.table,\n          \"aria-label\": \"simple table\",\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                align: \"right\",\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: [names.map((s, i) => /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                component: \"th\",\n                scope: \"row\",\n                children: s.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: s.amount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 37\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 33\n            }, this)), /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n                children: \"Total\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n                align: \"right\",\n                children: totalAmount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n_c = NameTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"NameTable\");","map":{"version":3,"sources":["/Users/villetaskinen/Desktop/names/names-app/src/nameTable.js"],"names":["React","Grid","Card","Button","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableSortLabel","data","useStyles","table","width","card","background","container","button","padding","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","NameTable","classes","names","sortNames","nameOrder","sort","a","b","name","toUppescase","toUppercase","amount","totalAmount","console","log","map","s","i"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n    Grid, Card, Button, withStyles, makeStyles, Table, TableBody, TableCell,\n    TableContainer, TableHead, TableRow, TableSortLabel\n} from '@material-ui/core';\nimport data from './resources/names'\n\n\nconst useStyles = makeStyles({\n    table: {\n        width: \"50%\",\n    },\n    card: {\n        background: \"white\",\n        width: \"50%\",\n    },\n    container: {\n        width: 500,\n    },\n    button: {\n        padding: '30px',\n    },\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\nexport const NameTable = () => {\n\n    const classes = useStyles;\n\n    const names = data.names;\n\n    const sortNames = (nameOrder) => {\n\n        if (nameOrder) {\n            names.sort((a, b) => (a.name.toUppescase() > b.name.toUppercase()) ? 1 : -1)\n        }\n        else {\n            names.sort((a, b) => (a.amount > b.amount) ? 1 : -1)\n\n        }\n    }\n\n    const nameOrder = \"true\";\n\n    const totalAmount = 100;\n\n    console.log(names[0]);\n\n    sortNames;\n\n    return (\n\n\n\n        <Card className={classes.card}>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                spacing={3}\n            >\n                <Grid container item xs={6}>\n                    <Button className={classes.button} variant=\"outlined\" color=\"primary\" disabled={nameOrder}>\n                        Order by name\n    </Button>\n                </Grid><Grid container item xs={6}>\n                    <Button className={classes.button} variant=\"outlined\" color=\"primary\" disabled={!nameOrder}>\n                        Order by amount\n    </Button>\n                </Grid>\n\n\n\n                <TableContainer className={classes.container}>\n                    <Table className={classes.table} aria-label=\"simple table\">\n                        <TableHead>\n                            <TableRow>\n                                <StyledTableCell>Name</StyledTableCell>\n                                <StyledTableCell align=\"right\">Amount</StyledTableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {names.map((s, i) => (\n                                <TableRow key={i}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {s.name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{s.amount}</TableCell>\n                                </TableRow>\n                            ))}\n                            <TableRow>\n                                <StyledTableCell>Total</StyledTableCell>\n                                <StyledTableCell align=\"right\">{totalAmount}</StyledTableCell>\n                            </TableRow>\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </Grid>\n        </Card>\n\n\n    );\n};"]},"metadata":{},"sourceType":"module"}