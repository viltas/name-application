{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/villetaskinen/Desktop/names/names-app/src/nameTable.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { withStyles, makeStyles, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TableSortLabel, TablePagination } from '@material-ui/core';\n\nconst NameTable = props => {\n  _s();\n\n  const {\n    names\n  } = props;\n  const StyledTableCell = withStyles(theme => ({\n    head: {\n      backgroundColor: '#0f9dc3',\n      color: theme.palette.common.white\n    },\n    body: {\n      fontSize: 14\n    }\n  }))(TableCell);\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const [orderBy, setOrderBy] = useState(\"amount\");\n\n  const sortNames = () => {\n    if (orderBy === \"name\") {\n      names.sort((a, b) => a.name.localeCompare(b.name));\n    } else {\n      names.sort((a, b) => b.amount - a.amount || a.name.localeCompare(b.name));\n    }\n  };\n\n  const handleSort = () => {\n    console.log(\"sorting\");\n\n    if (orderBy === \"name\") {\n      setOrderBy(\"amount\");\n    } else {\n      setOrderBy(\"name\");\n      console.log(orderBy);\n    }\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  sortNames();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        className: classes.table,\n        stickyHeader: true,\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                active: orderBy === \"name\",\n                onClick: handleSort,\n                children: \"Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              align: \"right\",\n              children: /*#__PURE__*/_jsxDEV(TableSortLabel, {\n                active: orderBy === \"amount\",\n                onClick: handleSort,\n                children: \"Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 60\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: names.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((s, i) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: s.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              align: \"right\",\n              children: s.amount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 37\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [5, 10, 20],\n      component: \"div\",\n      count: names.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onChangePage: handleChangePage,\n      onChangeRowsPerPage: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(NameTable, \"4s+DjWYih7Ga0mVxZtvXVWG7b3Y=\");\n\n_c = NameTable;\nexport default NameTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"NameTable\");","map":{"version":3,"sources":["/Users/villetaskinen/Desktop/names/names-app/src/nameTable.js"],"names":["React","useState","withStyles","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableSortLabel","TablePagination","NameTable","props","names","StyledTableCell","theme","head","backgroundColor","color","palette","common","white","body","fontSize","page","setPage","rowsPerPage","setRowsPerPage","orderBy","setOrderBy","sortNames","sort","a","b","name","localeCompare","amount","handleSort","console","log","handleChangePage","event","newPage","handleChangeRowsPerPage","parseInt","target","value","classes","table","slice","map","s","i","length"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {\n    withStyles, makeStyles, Table, TableBody, TableCell,\n    TableContainer, TableHead, TableRow, TableSortLabel,\n    TablePagination\n} from '@material-ui/core';\n\n\n\n\n\nconst NameTable = (props) => {\n\n    const { names } = props;\n\n    const StyledTableCell = withStyles((theme) => ({\n        head: {\n            backgroundColor: '#0f9dc3',\n            color: theme.palette.common.white,\n        },\n        body: {\n            fontSize: 14,\n        },\n    }))(TableCell);\n\n\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\n    const [orderBy, setOrderBy] = useState(\"amount\");\n\n\n    const sortNames = () => {\n        if (orderBy === \"name\") {\n            names.sort((a, b) => (a.name.localeCompare(b.name)))\n        }\n        else {\n            names.sort((a, b) => (b.amount - a.amount || a.name.localeCompare(b.name)))\n\n        }\n    }\n\n    const handleSort = () => {\n        console.log(\"sorting\");\n        if (orderBy === \"name\") {\n            setOrderBy(\"amount\");\n        }\n        else {\n            setOrderBy(\"name\");\n            console.log(orderBy);\n        }\n    }\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    sortNames();\n\n\n\n    return (\n\n        <div>\n            <TableContainer>\n                <Table className={classes.table} stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <StyledTableCell>\n\n\n                                <TableSortLabel\n                                    active={orderBy === \"name\"}\n                                    onClick={handleSort}>\n                                    Name\n                                                </TableSortLabel>\n                            </StyledTableCell>\n                            <StyledTableCell align=\"right\"><TableSortLabel\n                                active={orderBy === \"amount\"}\n                                onClick={handleSort}>\n                                Amount\n                                        </TableSortLabel>\n                            </StyledTableCell>\n                        </TableRow>\n\n                    </TableHead>\n                    <TableBody>\n                        {names\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            .map((s, i) => (\n                                <TableRow key={i}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {s.name}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{s.amount}</TableCell>\n                                </TableRow>\n                            ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            <TablePagination\n                rowsPerPageOptions={[5, 10, 20]}\n                component=\"div\"\n                count={names.length}\n                rowsPerPage={rowsPerPage}\n                page={page}\n                onChangePage={handleChangePage}\n                onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n        </div>\n    );\n};\n\nexport default NameTable;\n"]},"metadata":{},"sourceType":"module"}